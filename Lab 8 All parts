#include <iostream>
#include <bitset>

//----------------------Scope Resolutions----------------------//
using std::endl;
using std::cout;
using std::cin;
using std::hex;
using std::bitset;


//----------------------Function Declarations----------------------//
void mainMenu();

//--SubMenus--//
void subMenu();		//16-bit submenu
void subMenu2();	//32-bit submenu
void subMenu3();	//16-bit assembly submenu

//--16-bit operations--//
void And_operation(unsigned short r1, unsigned short r2);
void Or_operation(unsigned short r1, unsigned short r2);
void Xor_operation(unsigned short r1, unsigned short r2);
void Not_operation(unsigned short r1);

//--32-bit operations--//
void And_operation2(unsigned int r1, unsigned int r2);
void Or_operation2(unsigned int r1, unsigned int r2);
void Xor_operation2(unsigned int r1, unsigned int r2);
void Not_operation2(unsigned int r1);


//--16-bit assembly operations--//
void And_operation3(unsigned short r1, unsigned short r2);
void Or_operation3(unsigned short r1, unsigned short r2);
void Xor_operation3(unsigned short r1, unsigned short r2);
void Not_operation3(unsigned short r1);


int main()
{
	char ch, ch1, ch2, ch3;
	unsigned short r1, r2;
	unsigned int n1, n2;

	cout << "Start the Logic Operations? Y/N?: ";																		
	cin >> ch;
	ch1 = ch;																											//This is A1

	mainMenu();
	cout << "Menu Options: ";
	cin >> ch;
	ch2 = ch;																											//This is A2
	while (ch1 == 'Y' || ch1 == 'y')																					//while A1 = Yes, continute running, otherwise stop
	{
		if (ch2 == '1')																									//If 16-bit operations are desired:
		{
		subMenu:																										//this is for default
			subMenu();
			cout << "submenu - input your choice: ";
			cin >> ch;
			ch3 = ch;
			switch (ch3)
			{
			case 'a':																									// case AND
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				cout << "Enter the second number in Hex format: \t(example: ff00)\n";
				cin >> hex >> r2;
				And_operation(r1, r2);
				break;
			}
			case 'b':																									// case OR
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				cout << "Enter the second number in Hex format: \t(example: ff00)\n";
				cin >> hex >> r2;
				Or_operation(r1, r2);
				break;
			}
			case 'c':																									// case XOR
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				cout << "Enter the second number in Hex format: \t(example: ff00)\n";
				cin >> hex >> r2;
				Xor_operation(r1, r2);
				break;
			}
			case 'd':																									// case NOT
			{
				cout << "Enter the number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				Not_operation(r1);
				break;
			}
			default: goto subMenu;																						// if A2 isn't a-d, run the submenu again
			}
		} 
		else if(ch2 == '2')																								//If 32-bit operations are desired:
		{
		subMenu2:																										//this is for default
			subMenu2();
			cout << "submenu - input your choice: ";
			cin >> ch;
			ch3 = ch;
			switch (ch3)
			{
			case 'a':																									// case AND
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE34BD)\n";
				cin >> hex >> n1;
				cout << "Enter the second number in Hex format: \t(example: FF00EE11)\n";
				cin >> hex >> n2;
				And_operation2(n1, n2);
				break;
			}
			case 'b':																									// case OR
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE34BD)\n";
				cin >> hex >> n1;
				cout << "Enter the second number in Hex format: \t(example: FF00EE11)\n";
				cin >> hex >> n2;
				Or_operation2(n1, n2);
				break;
			}
			case 'c':																									// case XOR
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE34BD)\n";
				cin >> hex >> n1;
				cout << "Enter the second number in Hex format: \t(example: FF00EE11)\n";
				cin >> hex >> n2;
				Xor_operation2(n1, n2);
				break;
			}
			case 'd':																									// case NOT
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE34BD)\n";
				cin >> hex >> n1;
				Not_operation2(n1);
				break;
			}
			default: goto subMenu2;																						// if A2 isn't a-d, run the submenu again
			}
		}
		else if (ch2 == '3')
		{

		subMenu3:																										//this is for default
			subMenu3();
			cout << "submenu - input your choice: ";
			cin >> ch;
			ch3 = ch;
			switch (ch3)
			{
			case 'a':																									// case AND
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				cout << "Enter the second number in Hex format: \t(example: ff00)\n";
				cin >> hex >> r2;
				And_operation3(r1, r2);
				break;
			}
			case 'b':																									// case OR
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				cout << "Enter the second number in Hex format: \t(example: ff00)\n";
				cin >> hex >> r2;
				Or_operation3(r1, r2);
				break;
			}
			case 'c':																									// case XOR
			{
				cout << "Enter the first number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				cout << "Enter the second number in Hex format: \t(example: ff00)\n";
				cin >> hex >> r2;
				Xor_operation3(r1, r2);
				break;
			}
			case 'd':																									// case NOT
			{
				cout << "Enter the number in Hex format:\t(example: 12AE)\n";
				cin >> hex >> r1;
				Not_operation3(r1);
				break;
			}
			default: goto subMenu3;																						// if A2 isn't a-d, run the submenu again
			}
		}
		else																											//else - stop
		{
			goto EndLable;
		}

		cout << "\nWould you like to continue Logic Operations? Y/N:\t" << endl;										// Ask user to select new value for A1
		cin >> ch;
		ch1 = ch;
	}
EndLable:																												// Program stopper part
	cout << "Exit Program" << endl;
	system("pause");
	exit(0);
	return 0;
	}

//----------------------Function Definitions----------------------//
void mainMenu()
{
	cout << "Menu" << endl;
	cout << "1. Perform logic operation with 16-bit operand(s)" << endl;
	cout << "2. Perform logic operation with 32-bit operand(s)" << endl;
	cout << "3. Perform assembly logic operation with 16-bit operand(s)" << endl;
	cout << "4. Exit" << endl;
}


//--SubMenus--//
void subMenu()
{
	cout << "a. Unsigned 16-bit AND operation\n";
	cout << "b. Unsigned 16-bit OR  operation\n";
	cout << "c. Unsigned 16-bit XOR operation\n";
	cout << "d. Unsigned 16-bit NOT operation\n";
}

void subMenu2()
{
	cout << "a. Unsigned 32-bit AND operation\n";
	cout << "b. Unsigned 32-bit OR  operation\n";
	cout << "c. Unsigned 32-bit XOR operation\n";
	cout << "d. Unsigned 32-bit NOT operation\n";
}

void subMenu3()
{
	cout << "a. Unsigned 16-bit Assembly AND operation\n";
	cout << "b. Unsigned 16-bit Assembly OR  operation\n";
	cout << "c. Unsigned 16-bit Assembly XOR operation\n";
	cout << "d. Unsigned 16-bit Assembly NOT operation\n";
}


//--16-bit operations--//
void And_operation(unsigned short r1, unsigned short r2)
{
	unsigned short r;

	r = r1 & r2;

	bitset <16> operant1_Bits(r1);
	bitset <16> operant2_Bits(r2);
	bitset <16> result_Bits(r);

	cout << "Performing an AND operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tAND\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Or_operation(unsigned short r1, unsigned short r2)
{
	unsigned short r;

	r = r1 | r2;

	bitset <16> operant1_Bits(r1);
	bitset <16> operant2_Bits(r2);
	bitset <16> result_Bits(r);

	cout << "Performing an OR operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tOR\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Xor_operation(unsigned short r1, unsigned short r2)
{
	unsigned short r;

	r = r1 ^ r2;

	bitset <16> operant1_Bits(r1);
	bitset <16> operant2_Bits(r2);
	bitset <16> result_Bits(r);

	cout << "Performing an XOR operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tXOR\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Not_operation(unsigned short r1)
{
	unsigned short r;

	r = ~r1;

	bitset <16> operant1_Bits(r1);
	bitset <16> result_Bits(r);

	cout << "Performing an NOT operation: " << endl;
	cout << "\tNOT\t" << operant1_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}


//--32-bit operations--//
void And_operation2(unsigned int r1, unsigned int r2)
{
	unsigned int r;

	r = r1 & r2;

	bitset <32> operant1_Bits(r1);
	bitset <32> operant2_Bits(r2);
	bitset <32> result_Bits(r);

	cout << "Performing an AND operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tAND\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Or_operation2(unsigned int r1, unsigned int r2)
{
	unsigned int r;

	r = r1 | r2;

	bitset <32> operant1_Bits(r1);
	bitset <32> operant2_Bits(r2);
	bitset <32> result_Bits(r);

	cout << "Performing an OR operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tOR\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Xor_operation2(unsigned int r1, unsigned int r2)
{
	unsigned int r;

	r = r1 ^ r2;

	bitset <32> operant1_Bits(r1);
	bitset <32> operant2_Bits(r2);
	bitset <32> result_Bits(r);

	cout << "Performing an XOR operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tXOR\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Not_operation2(unsigned int r1)
{
	unsigned int r;

	r = ~r1;

	bitset <32> operant1_Bits(r1);
	bitset <32> result_Bits(r);

	cout << "Performing an NOT operation: " << endl;
	cout << "\tNOT\t" << operant1_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

//--16-bit assembly operations--//
void And_operation3(unsigned short r1, unsigned short r2)
{
	unsigned short r;

	_asm
	{
		MOV AX, r1;
		MOV CX, r2;
		AND AX, CX;
		MOV r, AX;
	}

	bitset <16> operant1_Bits(r1);
	bitset <16> operant2_Bits(r2);
	bitset <16> result_Bits(r);

	cout << "Performing an AND operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tAND\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Or_operation3(unsigned short r1, unsigned short r2)
{
	unsigned short r;

	_asm
	{
		MOV AX, r1;
		MOV CX, r2;
		OR AX, CX;
		MOV r, AX;
	}

	bitset <16> operant1_Bits(r1);
	bitset <16> operant2_Bits(r2);
	bitset <16> result_Bits(r);

	cout << "Performing an OR operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tOR\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Xor_operation3(unsigned short r1, unsigned short r2)
{
	unsigned short r;

	_asm
	{
		MOV AX, r1;
		MOV CX, r2;
		XOR AX, CX;
		MOV r, AX;
	}

	bitset <16> operant1_Bits(r1);
	bitset <16> operant2_Bits(r2);
	bitset <16> result_Bits(r);

	cout << "Performing an XOR operation: " << endl;
	cout << "\t\t" << operant1_Bits << endl;
	cout << "\tXOR\t" << operant2_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}

void Not_operation3(unsigned short r1)
{
	unsigned short r;

	_asm
	{
		MOV AX, r1;
		NOT AX;
		MOV r, AX;
	}

	bitset <16> operant1_Bits(r1);
	bitset <16> result_Bits(r);

	cout << "Performing an NOT operation: " << endl;
	cout << "\tNOT\t" << operant1_Bits << endl;
	cout << "------------------------\n";
	cout << "\t\t" << result_Bits << endl;
	cout << "=====================================================================";
}
